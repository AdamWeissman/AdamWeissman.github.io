---
layout: post
title:      "An Anecdote about Mastery from My Friend "
date:       2020-03-07 14:18:36 +0000
permalink:  an_anecdote_about_mastery_from_my_friend
---


> ASIDE: skip to the next header if you just want the anecdote about mastery.  What follows directly below is what got me thinking about the path to mastery.  
> 
> In short, it's about scaffolding.
> 

I sometimes feel/fear that the path to mastery is not about tediously learning "the building blocks", but understanding them in the context of a masterpiece.  I bring this up, because I'm working my way through Rails and have some *lamentations* about (what seems to be) the general perspective on scaffolding, which is: "It's too powerful for you, and you will use it wrong, so don't use it."  

There was an analogy about going double the speed limit and then having to back track to your exit, as opposed to going the speed limit and reaching your destination safely.  There was another anecdote in a lab about someone who discovered a misuse of scaffolding in production code that they had to refactor.

Now, I'll take it on faith that the scaffolding was used reaaaally terribly, or reaaally poorly.  But, there were a few things that caused me to stop and think: what situations would cause someone to be refactoring lousy code?  
* **"The negative reason":** the company you're working for is run by idiots.  They didn't know the person before you was incompetent.  Your predecessor lied on their resume, fooled the hiring manager, and then went bonkers abusing scaffolds to 'make work difficult' because they were passive aggressively trying to make things difficult for future coders, or too clueless to know what was going on.
* **"The 'reasonable' reason":**  Your predecessor was experimenting with a new technology that they barely understood in order to make some production deadline.  Real world constraints made it impossible for them to write "beautiful code".
* **"The good reason":** Your predecessor was the founder of the company that hired you.  They only cared enough about building something that worked in order to bring their idea to market.  They hired you specifically to fix it.

Two anecdotes relative to The Reasonable or Good reasons.  

My brother shared a story of nightmare refactoring, along with the reason why the code was a nightmare.  The original guy hired was apparently brilliant enough to get a working prototype of a web service for a company, but a sloppy coder -- everything was more or less in one file, functions and variables had names equivalent to "x, y, z."  It all worked, but to anyone that was not the original coder -- it was essentially hieroglyphics.  Another anecdote relative to The Good Reason: In Ashlee Vance's biography on Elon Musk, she relays a story of his time at PayPal and before... (PayPal was what Peter Thiel and Elon Musk renamed their company after Thiel's Cofinity and Musk's X.com merged); the story she cited was about what a terrible coder Musk was, and what a nightmare it was for the professional coders to debug and refactor his code as the company got bigger.

In both of the above contexts, I can imagine the "bad coders" (the anonymous one, and Elon Musk) using scaffolding incorrectly to better get the job done.  To circle back to the "Biblical theme" of *lamentations*: I would say "hate the sin, not the sinner."  Or, in this case -- hate the way that scaffolding is used, but don't hate scaffolding, nor the person that used it.  If the Rails section were to be refactored, my wish would be to focus on how to use scaffolding (and all the other powerful tools correctly).  It seems, at least to me, that the whole reason Ruby on Rails ascended to an apex programming experience is BECAUSE OF powerful (and easily misused tools), not in spite of them.  If these languages are dying, I wonder if it might have something to do with the idea that its most powerful tools are generally maligned on the internet -- that beginners make beginner habits permanent because they view the most powerful tools of the language, in the same way that people might constrast bows and arrows with laser guided missiles.  In other words, I would assume that when it comes to bad code, bad code is well bad code... but, in the bigger picture: context is everything. 

## THE ANECDOTE -- you can start here...
Here's the anecdote (summarized) from a friend of mine who is a VR Artist that went to graduate school at CalArts (founded by Walt Disney), and did undergrad work at NYU Film... it was something that he shared with me about learning that has profoundly influenced me, and what got me writing this blog.  The above text is specific to scaffolding, but his anecdote is actually for all circumstances where learning something is involved.  It's been years since we had the conversation, so I called him this morning to verify the essence of his words.  Luckily I remembered it correct: 

"Many drawing classes will spend an entire semester focused on drawing nude models, so the student can better learn proportions and get a sense of the human body.  But you can actually learn it all in about a week from one of those hacky 'how to draw like Marvel in just 10 days!!' books where someone just tells you the proportions, a few things about anatomy, and a few things about perspective.  The teachers hate that stuff because it makes it seem like what they're doing is easy.  **But the truth is: technical skill is EASY.**  Anyone can master drawing a still life or a portrait if they waste enough time doing it.  **The difficult part is realizing what you can do with the skills you have, and using them to do more than you ever thought possible.**  Time is finite, so if you spend an entire semester drawing one nude to get a sense of proportions, you can't get that time back -- and what's more, despite tediously rendering each detail, you may still have no concept of anatomy.  If you spend a week or two learning what the IDEAL is supposed to be, and then the rest of the semester trying to figure out how many different ways you can bend those proportions or implement them in different situations, you'll come out ahead as an artist.  Even if the person who spent the entire semester drawing 'that one picture, one way,' can draw it better than you, that's fine and to be expected.  But, if you tack on another semester of drawing, the person who is familiar with the multitudes of context will have an easier time drilling down on (and mastering) the details.  They will emerge a better master, faster. The person who spent the initial time mastering the details of some single specific case will find it harder to generalize their experience/knowledge to a multitude of contexts, **because: by the time they see the forest for the trees, they'll have already built a habit of looking ONLY at the trees.** (which is harder to unlearn, than learning how new details fit into a larger context)." 
